<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   xmlns:toc="com.esri.viewer.components.toc.*"
                   initialize="basewidget_initializeHandler()"
                   widgetConfigLoaded="basewidget_widgetConfigLoaded()">
    <fx:Script>
        <![CDATA[
            import com.esri.viewer.AppEvent;

            import mx.collections.ArrayCollection;

            [Bindable]
            private var title:String;
            private var includeLegendItems:Boolean = true; // include legend items in the TOC

            private function basewidget_initializeHandler():void
            {
                if (isPartOfPanel) // if widget is part of "left", "right" or "bottom" panel
                {
                    this.percentWidth = this.percentHeight = 100;
                    wTemplate.percentWidth = wTemplate.percentHeight = 100;
                }
                else
                {
                    wTemplate.width = wTemplate.height = 300;
                }
            }

            private function basewidget_widgetConfigLoaded():void
            {
                var expandLayerItems:Boolean = false;

                if (configXML)
                {
                    title = configXML.labels.title || getDefaultString("layerListTitle");
                    // added in version 2.5
                    expandLayerItems = configXML.expandlayeritems == "true";
                    if (configXML.includelegenditems.length())
                    {
                        includeLegendItems = configXML.includelegenditems == "true";
                    }
                }

                if (configData && configData.opLayers.length > 0) // do not initialize TOC if there are no operational layers
                {
                    initTOC(expandLayerItems);
                }
            }

            private function initTOC(expandLayerItems:Boolean = false):void
            {
                toc.map = map;
                toc.isMapServiceOnly = false; //gotta get this from the config file
                toc.excludeLayers = getExcludeLayers();
                toc.basemapLayers = getBasemapLayers();
                toc.excludeGraphicsLayers = true;
                toc.includeLegendItems = includeLegendItems;
                toc.expandLayerItems = expandLayerItems;
            }

            private function getExcludeLayers():ArrayCollection
            {
                var result:ArrayCollection = getBasemapLayers();

                if (configXML)
                {
                    // exclude these layers
                    var layers:XMLList = configXML.excludelayer as XMLList;
                    for (var j:Number = 0; j < layers.length(); j++)
                    {
                        result.addItem(layers[j].toString());
                    }
                }

                return result;
            }

            private function getBasemapLayers():ArrayCollection
            {
                var result:ArrayCollection = new ArrayCollection();

                if (configData && configData.basemaps)
                {
                    for (var i:int = 0; i < configData.basemaps.length; i++)
                    {
                        result.addItem(configData.basemaps[i].label);
                    }
                }

                return result;
            }
        ]]>
    </fx:Script>
    <viewer:WidgetTemplate id="wTemplate"
                           closed="AppEvent.dispatch(AppEvent.TOC_HIDDEN)"
                           minimized="AppEvent.dispatch(AppEvent.TOC_HIDDEN)"
                           startDrag="AppEvent.dispatch(AppEvent.TOC_HIDDEN)">
        <viewer:layout>
            <s:VerticalLayout gap="8" paddingTop="4"/>
        </viewer:layout>
        <s:Label text="{title}"/>
        <toc:TOC id="toc"
                 width="100%" height="100%"/>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
