<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:HeaderController="widgets.HeaderController.*"
                width="100%"
                autoDrawBackground="false"
                buttonMode="true"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                focusEnabled="true"
                implements="mx.managers.IFocusManagerComponent"
                minHeight="30"
                useHandCursor="true">

    <fx:Script>
        <![CDATA[
            import flashx.textLayout.formats.TextAlign;

            import mx.events.FlexEvent;

            import spark.components.DataGroup;

            private const WIDGET_ITEM_CLICK:String = "widgetListItemClick";

            [Bindable]
            private var widgetItem:WidgetItem;

            [Bindable]
            private var upperRad:int = 0;

            [Bindable]
            private var lowerRad:int = 0;

            private var isLastItem:Boolean;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                widgetItem = data as WidgetItem;

                icon.source = widgetItem.icon;
                underline.widgetOpen = widgetItem.open;

                // set style on the label
                widgetLabel.setStyle("textAlign", TextAlign.CENTER);
                widgetLabel.text = widgetItem.label;

                if (itemIndex == 0)
                {
                    lowerRad = 0;
                    upperRad = 4;
                    scs.alpha = 0.3;
                }
                else if (isLastItem)
                {
                    lowerRad = 4;
                    upperRad = 0;
                    scs.alpha = 0;
                }
                else
                {
                    lowerRad = 0;
                    upperRad = 0;
                    scs.alpha = 0.3;
                }
            }

            override public function set itemIndex(value:int):void
            {
                super.itemIndex = value;

                var dataGroup:DataGroup = parent as DataGroup;
                isLastItem = (dataGroup && (value == dataGroup.numElements - 1));
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_CLICK, true)); // bubbles
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>

    <!-- border/background rectangle -->
    <s:Rect left="0" right="-2" top="-6" bottom="0"
            bottomLeftRadiusX="{lowerRad}"
            bottomLeftRadiusY="{lowerRad}"
            bottomRightRadiusX="{lowerRad}"
            bottomRightRadiusY="{lowerRad}"
            topLeftRadiusX="{upperRad}"
            topLeftRadiusY="{upperRad}"
            topRightRadiusX="{upperRad}"
            topRightRadiusY="{upperRad}">
        <s:fill>
            <s:SolidColor alpha="0.3"
                          alpha.hovered="0.8"
                          color.hovered="{getStyle('rollOverColor')}"
                          color.normal="{getStyle('contentBackgroundColor')}"/>
        </s:fill>
    </s:Rect>

    <s:VGroup width="100%" height="100%">
        <s:HGroup width="100%" height="30"
                  buttonMode="true"
                  paddingBottom="8"
                  paddingLeft="10"
                  paddingTop="13"
                  useHandCursor="true"
                  verticalAlign="middle">
            <s:VGroup width="25" height="30"
                      horizontalAlign="center">
                <s:Image id="icon"
                         width="25" height="25"
                         smooth="true"/>
                <HeaderController:WidgetUnderline id="underline"/>
            </s:VGroup>
            <s:Label id="widgetLabel"
                     width="100%"
                     color="{getStyle('color')}"
                     maxDisplayedLines="3"
                     showTruncationTip="true"/>
        </s:HGroup>

        <!--divider-->
        <s:Line width="100%">
            <s:stroke>
                <s:SolidColorStroke id="scs"
                                    alpha="0.3"
                                    caps="square"
                                    color="#C4CCCC"
                                    weight="2"/>
            </s:stroke>
        </s:Line>
    </s:VGroup>
</s:ItemRenderer>
