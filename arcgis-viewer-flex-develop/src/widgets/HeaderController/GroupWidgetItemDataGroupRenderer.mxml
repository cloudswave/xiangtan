<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false"
                buttonMode="true"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                focusEnabled="true"
                implements="mx.managers.IFocusManagerComponent"
                useHandCursor="true">

    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;

            import spark.components.Group;

            private const WIDGET_ITEM_CLICK:String = "widgetItemClick";
            private const WIDGET_ITEM_MOUSE_OVER:String = "widgetItemMouseOver";
            private const WIDGET_ITEM_MOUSE_OUT:String = "widgetItemMouseOut";

            [Bindable]
            private var widgetItem:WidgetItem;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                widgetItem = data as WidgetItem;

                icon.source = widgetItem.icon;
            }

            private function mouseOutHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OUT, true)); // bubbles
            }

            private function mouseOverHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_MOUSE_OVER, true)); // bubbles
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(WIDGET_ITEM_CLICK, true)); // bubbles
            }

            //--------------------------------------------------------------------------
            //
            //  Focus Management
            //
            //--------------------------------------------------------------------------

            override public function drawFocus(isFocused:Boolean):void
            {
                super.drawFocus(isFocused);

                // Popup the tooltip or remove the menu
                if (isFocused)
                {
                    mouseOverHandler(null);
                }
                else
                {
                    mouseOutHandler(null);
                }
            }

            private var keyboardPressed:Boolean = false;

            override protected function keyDownHandler(event:KeyboardEvent):void
            {
                if (event.keyCode != Keyboard.SPACE)
                {
                    return;
                }

                keyboardPressed = true;
                event.updateAfterEvent();
            }

            override protected function keyUpHandler(event:KeyboardEvent):void
            {
                if (event.keyCode != Keyboard.SPACE)
                {
                    return;
                }

                if (enabled && keyboardPressed)
                {
                    // Mimic mouse click on the button.
                    keyboardPressed = false;
                    dispatchEvent(new MouseEvent(MouseEvent.CLICK));
                }
                event.updateAfterEvent();
            }
        ]]>
    </fx:Script>

    <s:VGroup width="30" height="30"
              gap="2"
              horizontalAlign="center"
              rollOut="mouseOutHandler(event)"
              rollOver="mouseOverHandler(event)"
              verticalAlign="middle">
        <s:Image id="icon"
                 width="25" height="25"
                 buttonMode="true"
                 smooth="true"
                 useHandCursor="true"/>
        <s:Graphic>
            <s:Group>
                <s:Path data="m 3 0 l -6 0 l 3 7 z">
                    <s:fill>
                        <s:SolidColor alpha="1" color="{getStyle('color')}"/>
                    </s:fill>
                </s:Path>
            </s:Group>
        </s:Graphic>
    </s:VGroup>

</s:ItemRenderer>
