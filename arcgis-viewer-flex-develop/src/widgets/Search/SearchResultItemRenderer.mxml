<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                autoDrawBackground="false"
                click="itemrenderer_clickHandler(event)"
                dataChange="itemrenderer_dataChangeHandler(event)"
                minHeight="30"
                mouseOut="itemrenderer_mouseOutHandler(event)"
                mouseOver="itemrenderer_mouseOverHandler(event)">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.symbols.Symbol;

            import mx.core.FlexGlobals;
            import mx.events.FlexEvent;

            import spark.components.Application;

            import widgets.supportClasses.ResultAttributes;
            import widgets.supportClasses.ResultItem;

            private const SEARCH_RESULT_CLICK:String = "searchResultClick";
            private const SEARCH_RESULT_MOUSE_OVER:String = "searchResultMouseOver";
            private const SEARCH_RESULT_MOUSE_OUT:String = "searchResultMouseOut";

            [Bindable]
            private var searchResultAttributes:ResultAttributes;

            private var lastResultSymbol:Symbol;
            private var lastResultSwatch:UIComponent;

            private function itemrenderer_dataChangeHandler(event:FlexEvent):void
            {
                var searchResult:ResultItem = data as ResultItem;
                searchResultAttributes = searchResult.attributes;

                if (searchResult && searchResult.symbol)
                {
                    if (lastResultSymbol !== searchResult.symbol)
                    {
                        if (resultIcon.numChildren > 0)
                        {
                            resultIcon.removeChildAt(0);
                        }
                        lastResultSymbol = searchResult.symbol;
                        lastResultSwatch = lastResultSymbol.createSwatch(20, 20);
                    }

                    resultIcon.addChild(lastResultSwatch);
                }
                else
                {
                    if (lastResultSwatch && (lastResultSwatch.parent == resultIcon))
                    {
                        resultIcon.removeChild(lastResultSwatch);
                    }
                }
            }

            private function itemrenderer_clickHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(SEARCH_RESULT_CLICK, true)); // bubbles
            }

            private function itemrenderer_mouseOverHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(SEARCH_RESULT_MOUSE_OVER, true)); // bubbles
            }

            private function itemrenderer_mouseOutHandler(event:MouseEvent):void
            {
                dispatchEvent(new Event(SEARCH_RESULT_MOUSE_OUT, true)); // bubbles
            }

            private function showLink(event:MouseEvent):void
            {
                event.stopImmediatePropagation(); // don't dispatch SEARCH_RESULT_CLICK since we don't want to zoom to feature
                navigateToURL(new URLRequest(searchResultAttributes.link));
            }

            protected function resultLink_preinitializeHandler(event:FlexEvent):void
            {
                if (isRtl())
                {
                    resultLink.source = "assets/images/w_link_rtl.png";
                }
                else
                {
                    resultLink.source = "assets/images/w_link.png";
                }
            }

            private function isRtl():Boolean
            {
                var result:Boolean = false;
                try
                {
                    result = (FlexGlobals.topLevelApplication as Application).layoutDirection == "rtl";
                }
                catch (error:Error)
                {
                    result = false;
                }
                return result;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal"/>
        <s:State name="hovered"/>
    </s:states>

    <!-- border/background rectangle -->
    <s:Rect left="0" right="0" top="0" bottom="0"
            radiusX="4"
            radiusY="4">
        <s:stroke>
            <mx:SolidColorStroke alpha="{getStyle('borderAlpha')}"
                                 color="{getStyle('borderColor')}"
                                 weight="1"/>
        </s:stroke>
        <s:fill>
            <mx:SolidColor alpha="0.3"
                           alpha.hovered="0.8"
                           color.hovered="{getStyle('rollOverColor')}"
                           color.normal="{getStyle('contentBackgroundColor')}"/>
        </s:fill>
    </s:Rect>

    <s:HGroup width="100%" height="100%"
              paddingBottom="3"
              paddingLeft="3"
              paddingRight="3"
              paddingTop="3"
              verticalAlign="middle">
        <mx:UIComponent id="resultIcon"
                        width="20" height="20">
            <mx:filters>
                <mx:GlowFilter alpha="0.5"
                               blurX="10"
                               blurY="10"
                               color="#000000"/>
            </mx:filters>
        </mx:UIComponent>
        <s:VGroup width="100%" height="100%"
                  verticalAlign="middle">
            <s:Label width="100%"
                     fontWeight="bold"
                     maxDisplayedLines="1"
                     text="{searchResultAttributes.title}"/>
            <s:Label width="100%"
                     fontWeight="normal"
                     maxDisplayedLines="-1"
                     text="{searchResultAttributes.content}"/>
        </s:VGroup>
        <mx:Image id="resultLink"
                  width="18" height="18"
                  buttonMode="true"
                  click="showLink(event)"
                  includeInLayout="{searchResultAttributes.link != null}"
                  preinitialize="resultLink_preinitializeHandler(event)"
                  source="assets/images/w_link.png"
                  toolTip="{searchResultAttributes.link}"
                  useHandCursor="true"
                  visible="{searchResultAttributes.link != null}"/>
    </s:HGroup>
</s:ItemRenderer>
