<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:viewer="com.esri.viewer.*"
                   creationComplete="init()"
                   implements="com.esri.viewer.IInfowindowTemplate"
                   preinitialize="basewidget_preinitializeHandler(event)">

    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.FlexEvent;

            [Bindable]
            private var contentList:ArrayCollection;

            [Bindable]
            private var infoChartItemRenderer:ClassFactory = new ClassFactory(InfoColumnChartItemRenderer);

            [Bindable]
            private var title:String;
            private var titleField:String;

            [Bindable]
            private var columnChartList:ArrayCollection;

            private var _data:Object;

            private var itemChart:Object = {};
            private var item:Object = {};

            private function basewidget_preinitializeHandler(event:FlexEvent):void
            {
                // work-around for 4.6 regression
                copyStyleFromParent("mx.charts.chartClasses.ChartBase");
                copyStyleFromParent("mx.charts.chartClasses.CartesianChart");
                copyStyleFromParent("mx.charts.chartClasses.PolarChart");
                copyStyleFromParent("mx.charts.BarChart");
                copyStyleFromParent("mx.charts.ColumnChart");
                copyStyleFromParent("mx.charts.LineChart");
                copyStyleFromParent("mx.charts.PieChart");
                copyStyleFromParent("mx.charts.AxisRenderer");
                copyStyleFromParent(".blockCategoryAxis");
                copyStyleFromParent(".blockNumericAxis");
                copyStyleFromParent(".linedNumericAxis");
                copyStyleFromParent(".dashedNumericAxis");
                copyStyleFromParent(".dashedCategoryAxis");
                copyStyleFromParent(".hangingCategoryAxis");
                copyStyleFromParent("mx.charts.GridLines");
                copyStyleFromParent(".horizontalGridLines");
                copyStyleFromParent("mx.charts.series.BarSeries");
                copyStyleFromParent("mx.charts.series.ColumnSeries");
                copyStyleFromParent("mx.charts.series.LineSeries");
                copyStyleFromParent("mx.charts.series.PieSeries");
            }

            private function copyStyleFromParent(selector:String):void
            {
                var chartBaseStyle:CSSStyleDeclaration = styleManager.getStyleDeclaration(selector);
                if (!chartBaseStyle && styleManager.parent)
                {
                    var parentStyle:CSSStyleDeclaration = styleManager.parent.getStyleDeclaration(selector);
                    if (parentStyle)
                    {
                        styleManager.setStyleDeclaration(selector, parentStyle, false);
                    }
                }
            }

            private function init():void
            {
                this.addEventListener(FlexEvent.DATA_CHANGE, setInfoParameters);
                infoClass = InfoColumnChartWidget;
            }

            public function set infoConfig(value:XML):void
            {

            }

            private function setInfoParameters(event:FlexEvent):void
            {
                if (_data)
                {
                    contentList = new ArrayCollection();
                    columnChartList = new ArrayCollection()

                    for each (var attribute:Object in _data.attributes)
                    {
                        for each (var field:Object in _data.listFields)
                        {
                            item = {
                                    field: field.name,
                                    value: attribute[field.name],
                                    alias: field.alias
                                };
                            contentList.addItem(item);
                        }

                        for each (var columnChartField:Object in _data.columnChartFields)
                        {
                            itemChart = {
                                    namefield: (columnChartField.alias != null ? columnChartField.alias : columnChartField.name),
                                    field: attribute[columnChartField.name]
                            }
                            columnChartList.addItem(itemChart);
                        }
                    }
                }
            }

            public override function set data(value:Object):void
            {
                _data = value;

                label = _data.title; // set the label on the infoWindow
                dispatchEvent(new Event("infoWindowLabelChanged", true));

                setInfoParameters(null);
            }

            public override function get data():Object
            {
                return _data;
            }

            private var _infoClass:Class = InfoColumnChartWidget;

            public function set infoClass(value:Class):void
            {
                _infoClass = value;
            }

            public function get infoClass():Class
            {
                return _infoClass;
            }
        ]]>
    </fx:Script>

    <s:VGroup id="infoCanvas"
              width="250" height="100%"
              minHeight="90"
              visible="true">
        <s:Scroller width="100%" height="100%">
            <s:DataGroup id="dataGroup"
                         dataProvider="{contentList}"
                         itemRenderer="{infoChartItemRenderer}">
                <s:layout>
                    <s:VerticalLayout gap="1" useVirtualLayout="false"/>
                </s:layout>
            </s:DataGroup>
        </s:Scroller>

        <mx:HBox width="100%" height="100%"
                 includeInLayout="{columnChartList.length > 0 ? true : false}"
                 visible="{columnChartList.length > 0 ? true : false}">
            <mx:ColumnChart id="myChart"
                            width="95%" height="150"
                            dataProvider="{columnChartList}">
                <mx:horizontalAxis>
                    <mx:CategoryAxis categoryField="namefield"/>
                </mx:horizontalAxis>
                <mx:series>
                    <mx:ColumnSeries displayName="field"
                                     xField="namefield"
                                     yField="field"/>
                </mx:series>
            </mx:ColumnChart>
        </mx:HBox>
    </s:VGroup>

</viewer:BaseWidget>
