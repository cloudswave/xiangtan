<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:mx="library://ns.adobe.com/flex/mx"
                xmlns:esri="http://www.esri.com/2008/ags"
                width="100%"
                autoDrawBackground="false">
    <fx:Script>
        <![CDATA[
            import mx.collections.ArrayList;

            import widgets.Geoprocessing.parameters.IGPParameter;
            import widgets.Geoprocessing.supportClasses.UnitMappingUtil;

            private function updateDistance():void
            {
                data.defaultValue.distance = distanceInput.data;
            }

            private function updateUnits():void
            {
                data.defaultValue.units = unitSelection.selectedItem;
            }

            override public function set data(value:Object):void
            {
                if (value)
                {
                    var choiceList:Array = (value as IGPParameter).choiceList;
                    if (choiceList)
                    {

                        unitSelection.dataProvider = new ArrayList(choiceList);
                        var defaultUnitIndex:int = choiceList.indexOf(value.defaultValue.units);

                        if (defaultUnitIndex > -1)
                        {
                            unitSelection.selectedIndex = defaultUnitIndex;
                        }
                    }
                    else
                    {
                        unitSelection.dataProvider = new ArrayList([ value.defaultValue.units ]);
                    }
                }

                super.data = value;
            }

            private function unitLabelFunction(units:String):String
            {
                return UnitMappingUtil.toPrettyUnits(units);
            }
        ]]>
    </fx:Script>

    <mx:FormItem width="100%"
                 direction="horizontal"
                 label="{data.label}"
                 required="{data.required}">
        <esri:DoubleField id="distanceInput"
                          width="100%"
                          change="updateDistance()"
                          text="{data.defaultValue.distance}"
                          toolTip="{data.toolTip}"/>

        <s:DropDownList id="unitSelection"
                        width="100%"
                        change="updateUnits()"
                        labelFunction="unitLabelFunction"
                        requireSelection="true"/>
    </mx:FormItem>
</s:ItemRenderer>
