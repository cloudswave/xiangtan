<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2010-2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<!---
@private
-->
<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   alpha.disabledStates="0.5"
                   minHeight="21"
                   minWidth="21">

    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.ToggleButton")]
        ]]>
    </fx:Metadata>

    <fx:Script fb:purpose="styling">
        /* Define the skin elements that should not be colorized.
        For toggle button, the graphics are colorized but the label is not. */
        static private const exclusions:Array = [ "labelDisplay" ];

        /**
         * @private
         */
        override public function get colorizeExclusions():Array
        {
            return exclusions;
        }

        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
    </fx:Script>

    <!-- states -->
    <s:states>
        <s:State name="up"/>
        <s:State name="over" stateGroups="overStates"/>
        <s:State name="down" stateGroups="downStates"/>
        <s:State name="disabled" stateGroups="disabledStates"/>
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates"/>
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates"/>
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates"/>
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates"/>
    </s:states>

    <!-- layer 1: fill -->
    <!--- @private -->
    <s:Rect id="fill"
            left="1" right="1" top="1" bottom="1">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry alpha="0.85"
                                 color="0xFFFFFF"
                                 color.down="0xAAAAAA"
                                 color.over="0xBBBDBD"/>
                <s:GradientEntry alpha="0.85"
                                 color="0xD8D8D8"
                                 color.down="0x929496"
                                 color.over="0x9FA0A1"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>

    <!-- layer 2: icons -->
    <!--- @private -->
    <s:Image horizontalCenter="0"
             includeInLayout="true"
             includeInLayout.selectedStates="false"
             source="assets/images/panelBox_arrow_down.png"
             verticalCenter="0"
             visible="true"
             visible.selectedStates="false"/>
    <!--- @private -->
    <s:Image horizontalCenter="0"
             includeInLayout="false"
             includeInLayout.selectedStates="true"
             source="assets/images/panelBox_arrow_up.png"
             verticalCenter="0"
             visible="false"
             visible.selectedStates="true"/>

</s:SparkButtonSkin>
